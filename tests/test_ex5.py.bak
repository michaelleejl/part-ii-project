import expecttest
import pandas as pd

from schema.schema import Schema
from schema.exceptions import NoShortestPathBetweenNodesException


class TestEx5(expecttest.TestCase):
    def initialise(self):
        s = Schema()

        person_df = pd.read_csv("./csv/roles/person.csv").set_index("person")
        task_df = pd.read_csv("./csv/roles/task.csv").set_index("task")

        person = s.insert_dataframe(person_df)
        task = s.insert_dataframe(task_df)

        p_role = person["role"]
        t_role = task["role"]

        Role = s.create_class("Role")

        s.blend(p_role, t_role, Role)
        return s, person, task, Role
        # SCHEMA:
        # person ---> role <--- task

    # GOAL 2
    # [person task || role]
    # Does role depend on person or task - depends on what you call infer on!

    def test_ex5_step1_get(self):
        s, person, task, Role = self.initialise()
        t1 = s.get(person = person["person"], task = task["task"])
        self.assertExpectedInline(
            str(t1),
            """\
[person task || ]
Empty DataFrame
Columns: []
Index: []
28 keys hidden

""",
        )
        # [person.person task.task || ]
        # Steve          logistics
        # Steve          manpower
        # Steve          research
        # ...
        # Dick           investment
        # Dick           budget

    def test_ex5_step2_infer(self):
        s, person, task, Role = self.initialise()
        t1 = s.get(person = person["person"], task = task["task"])
        t2 = t1.infer(["task"], Role)
        self.assertExpectedInline(
            str(t2),
            """\
[person task || Role]
                  Role
person task           
Steve  logistics   COO
Tom    logistics   COO
Harry  logistics   COO
Dick   logistics   COO
Steve  manpower    CEO
Tom    manpower    CEO
Harry  manpower    CEO
Dick   manpower    CEO
Steve  research    CTO
Tom    research    CTO
Harry  research    CTO
Dick   research    CTO
Steve  funding     CFO
Tom    funding     CFO
Harry  funding     CFO
Dick   funding     CFO
Steve  marketing   COO
Tom    marketing   COO
Harry  marketing   COO
Dick   marketing   COO
Steve  investment  CFO
Tom    investment  CFO
Harry  investment  CFO
Dick   investment  CFO
Steve  budget      CFO
Tom    budget      CFO
Harry  budget      CFO
Dick   budget      CFO

""",
        )
        # [person.person task.task   ||  Role]
        # Steve          logistics   ||  COO
        # Steve          manpower    ||  CEO
        # Steve          research    ||  CTO
        # ...
        # Dick           investment  ||  CFO
        # Dick           budget      ||  CFO

        # This is a lookup table.
        # If I know Steve is in charge of manpower, then he must be the CEO

    def test_ex5_step3_infer(self):
        # Or perhaps I can ask the other question - if I know person does task,
        # and I know their role, what can I infer about the role demanded by the task?
        s, person, task, Role = self.initialise()
        t1 = s.get(person = person["person"], task = task["task"])
        t3 = t1.infer(["person"], Role).sort(["person", "task"])
        self.maxDiff = None
        self.assertExpectedInline(
            str(t3),
            """\
[person task || Role]
                  Role
person task           
Steve  logistics   CFO
       manpower    CFO
       research    CFO
       funding     CFO
       marketing   CFO
       investment  CFO
       budget      CFO
Tom    logistics   CTO
       manpower    CTO
       research    CTO
       funding     CTO
       marketing   CTO
       investment  CTO
       budget      CTO
Harry  logistics   CAO
       manpower    CAO
       research    CAO
       funding     CAO
       marketing   CAO
       investment  CAO
       budget      CAO
Dick   logistics   CEO
       manpower    CEO
       research    CEO
       funding     CEO
       marketing   CEO
       investment  CEO
       budget      CEO

""",
        )
        # [person.person task.task   ||  Role]
        # Steve          logistics   ||  CFO
        # Steve          manpower    ||  CFO
        # Steve          research    ||  CFO
        # ...
        # Dick           investment  ||  CEO
        # Dick           budget      ||  CEO

        # Note that in the second case, task is a weak key for role,
        # whereas in the first case, person is a weak key for role.

    def test_ex5_step3_stressTest(self):
        # STRESS TEST
        s, person, task, Role = self.initialise()
        person["person"].id_prefix = 0
        task["task"].id_prefix = 0
        t1 = s.get(person = person["person"], task = task["task"])
        self.assertExpectedRaisesInline(
            NoShortestPathBetweenNodesException,
            lambda: t1.infer(["person", "task"], Role),
            """No paths found between nodes person;task and Role.If the path involves a projection that isn't the last edge in the path,The projection will need to be specified as a waypoint.""",
        )
        # There is no path from person.person x task.task to Role, only Role x Role.
        # This should throw an error
